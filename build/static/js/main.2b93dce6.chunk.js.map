{"version":3,"sources":["components/Logo.js","components/InfoModal.js","features/posts/postsSlice.js","features/subreddits/subredditSlice.js","App.js","app/store.js","reportWebVitals.js","index.js"],"names":["Logo","additionalTailiwindClasses","className","InfoModal","fetchPosts","createAsyncThunk","subredditName","a","fetch","toLowerCase","apiResponse","json","apiData","postsSlice","createSlice","name","initialState","postsLoading","posts","postsError","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","children","payload","data","map","postData","rejected","fetchSubreddits","searchTerm","topSubredditsEndpoint","subredditsBySearchTermEndpoint","subredditsSlice","subredditsLoading","subreddits","subredditsError","clearAll","actions","App","useState","classNamee","store","configureStore","reducer","postsReducer","subredditsReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNASeA,MATf,YAA+C,IAA/BC,EAA8B,EAA9BA,2BACf,OACC,qBAAIC,UAAS,mCAA8BD,GAA3C,UACC,sBAAMC,UAAU,eAAhB,kBACA,sBAAMA,UAAU,eAAhB,oB,2BC8EYC,I,yCC1EFC,EAAaC,YACzB,qBADyC,uCAEzC,WAAOC,GAAP,iBAAAC,EAAA,sEAC2BC,MAAM,4BAAD,OACFF,EAAcG,cADZ,UADhC,cACOC,EADP,gBAIuBA,EAAYC,OAJnC,cAIOC,EAJP,yBAKQA,GALR,2CAFyC,uDA4C3BC,EAjCWC,YAAY,CACrCC,KAAM,QACNC,aAnBoB,CACpBC,cAAc,EACdC,MAAO,KACPC,YAAY,GAiBZC,SAAU,GACVC,cAAe,SAACC,GACfA,EACEC,QAAQnB,EAAWoB,SAAS,SAACC,EAAOC,GACpCD,EAAMR,cAAe,EACrBQ,EAAMN,YAAa,KAEnBI,QACAnB,EAAWuB,WACX,SACCF,EADD,GAQM,IAHKG,EAGN,EAJHC,QACCC,KAAQF,SAIVH,EAAMR,cAAe,EACrBQ,EAAMP,MAAQU,EAASG,KAAI,SAACC,GAAD,OAAcA,EAASF,QAClDL,EAAMN,YAAa,KAGpBI,QAAQnB,EAAW6B,UAAU,SAACR,EAAOC,GACrCD,EAAMR,cAAe,EACrBQ,EAAMN,YAAa,QAKvB,QC5Cae,EAAkB7B,YAC9B,0BAD8C,sBAE9C,gDAAAE,EAAA,6DAAO4B,EAAP,+BAAoB,KACbC,EAAwB,yCACxBC,EAFP,+CAEgFF,EAFhF,qBAG2B3B,MACzB2B,EAAaE,EAAiCD,GAJhD,cAGO1B,EAHP,gBAMuBA,EAAYC,OANnC,cAMOC,EANP,yBAOQA,GAPR,6CAWY0B,EAAkBxB,YAAY,CAC1CC,KAAM,aACNC,aArBoB,CACpBuB,mBAAmB,EACnBC,WAAY,KACZC,iBAAiB,GAmBjBrB,SAAU,CACTsB,SAAU,SAACjB,GACVA,EAAMc,mBAAoB,EAC1Bd,EAAMe,WAAa,KACnBf,EAAMgB,iBAAkB,IAG1BpB,cAAe,SAACC,GACfA,EACEC,QAAQW,EAAgBV,SAAS,SAACC,EAAOC,GACzCD,EAAMc,mBAAoB,EAC1Bd,EAAMgB,iBAAkB,KAExBlB,QACAW,EAAgBP,WAChB,SACCF,EADD,GAOM,IAHKG,EAGN,EAJHC,QACCC,KAAQF,SAIVH,EAAMc,mBAAoB,EAC1Bd,EAAMe,WAAaZ,EAASG,KAAI,SAACC,GAAD,OAAcA,EAASF,QACvDL,EAAMgB,iBAAkB,KAGzBlB,QAAQW,EAAgBD,UAAU,SAACR,EAAOC,GAC1CD,EAAMc,mBAAoB,EAC1Bd,EAAMgB,iBAAkB,QAObH,GAFaA,EAAgBK,QAA7BD,SAEAJ,EAAf,SCbeM,MApCf,WACC,MAA0CC,oBAAS,GAAnD,mBA2BA,OA3BA,UA4BC,sBAAKC,WAAW,oBAAhB,UACC,cAAC,EAAD,IACA,oBAAIA,WAAW,gBAAf,6BCvCUC,EAAQC,YAAe,CACnCC,QAAS,CACR/B,MAAOgC,EACPV,WAAYW,KCKCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACC,cAAC,EAAD,QAGFiB,SAASC,eAAe,SAMzBb,M","file":"static/js/main.2b93dce6.chunk.js","sourcesContent":["function Logo({ additionalTailiwindClasses }) {\r\n\treturn (\r\n\t\t<h1 className={`font-ubuntu ubuntu-black ${additionalTailiwindClasses}`}>\r\n\t\t\t<span className=\"text-red-400\">read</span>\r\n\t\t\t<span className=\"text-gray-50\">it</span>\r\n\t\t</h1>\r\n\t);\r\n}\r\n\r\nexport default Logo;\r\n","import Logo from './Logo.js';\r\nimport { CrossIcon, LinkedInIcon, GithubIcon, DiscordIcon } from '../icons.js';\r\n\r\n// Main Component\r\nfunction InfoModal({ infoModalToggler }) {\r\n\tconst authors = [\r\n\t\t{\r\n\t\t\tname: 'Fahim',\r\n\t\t\tlinkedIn: 'https://www.linkedin.com/in/fahim-al-emroz-52b21720b/',\r\n\t\t\tgithub: 'https://github.com/CoderLadFahim',\r\n\t\t\tdiscord: 'https://discord.com/users/857790946413641735',\r\n\t\t\temail: 'fahimalemroz@gmail.com',\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'HanzHanz',\r\n\t\t\tlinkedIn: 'https://www.linkedin.com/in/hasan-omar-a8a94221b/',\r\n\t\t\tgithub: 'https://github.com/hanzala019',\r\n\t\t\tdiscord: 'https://discord.com/users/768892963756441640',\r\n\t\t\temail: 'hanzalaomar1@gmail.com',\r\n\t\t},\r\n\t];\r\n\r\n\treturn (\r\n\t\t<section className=\"backdrop w-screen h-screen absolute\">\r\n\t\t\t<div className=\"info-card w-11/12 h-5/6 sm:w-3/5 sm:h-3/5 md:w-1/2 xl:w-1/4 xl:h-5/6 2xl:w-1/3 bg-gray-600 z-50  absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-xl flex flex-col justify-evenly items-center\">\r\n\t\t\t\t<Logo additionalTailiwindClasses={'text-3xl'} />\r\n\t\t\t\t<button>\r\n\t\t\t\t\t<CrossIcon\r\n\t\t\t\t\t\tclassName=\"text-blue-400 absolute block right-3 top-3 transform transition hover:scale-125\"\r\n\t\t\t\t\t\tonClick={infoModalToggler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</button>\r\n\t\t\t\t<h1 className=\"text-2xl text-gray-300 font-bold font-nunito\">\r\n\t\t\t\t\tCreated by\r\n\t\t\t\t</h1>\r\n\r\n\t\t\t\t<div className=\"author-cards flex justify-center h-1/2 w-5/6 rounded-2xl overflow-hidden\">\r\n\t\t\t\t\t{authors.map((authorData) => (\r\n\t\t\t\t\t\t<AuthorCard key={authorData.name} author={authorData} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"backdrop bg-gray-800 opacity-95 absolute top-0 bottom-0 right-0 left-0 z-40\"\r\n\t\t\t\tonClick={infoModalToggler}\r\n\t\t\t></div>\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nfunction AuthorCard({ author: { name, linkedIn, github, discord, email } }) {\r\n\tconst copyEmailToClipboard = () => navigator.clipboard.writeText(email);\r\n\r\n\treturn (\r\n\t\t<div className=\"author-card bg-gray-700 flex flex-col w-1/2 justify-around items-center  box-content px-2\">\r\n\t\t\t<h1 className=\"author-name\">\r\n\t\t\t\t<span className=\"text-blue-400\">{'<'}</span>\r\n\t\t\t\t<span className=\"text-green-400 font-bold\">{name}</span>\r\n\t\t\t\t<span className=\"text-blue-400 \">{'/>'}</span>\r\n\t\t\t</h1>\r\n\r\n\t\t\t<div className=\"author-social w-full flex justify-around\">\r\n\t\t\t\t<a href={linkedIn} target=\"_blank\" rel=\"noreferrer\">\r\n\t\t\t\t\t<LinkedInIcon className=\"social-icon text-gray-400\" />\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href={github} target=\"_blank\" rel=\"noreferrer\">\r\n\t\t\t\t\t<GithubIcon className=\"social-icon text-gray-400\" />\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href={discord} target=\"_blank\" rel=\"noreferrer\">\r\n\t\t\t\t\t<DiscordIcon className=\"social-icon text-gray-400\" />\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\r\n\t\t\t<button\r\n\t\t\t\tonClick={copyEmailToClipboard}\r\n\t\t\t\tclassName=\"p-2 px-3 text-gray-200 font-nunito text-xs font-bold bg-gray-600 rounded-lg transition hover:bg-gray-500\"\r\n\t\t\t>\r\n\t\t\t\tCopy Email\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default InfoModal;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n\tpostsLoading: false,\r\n\tposts: null,\r\n\tpostsError: false,\r\n};\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n\t'counter/fetchPosts',\r\n\tasync (subredditName) => {\r\n\t\tconst apiResponse = await fetch(\r\n\t\t\t`https://www.reddit.com/r/${subredditName.toLowerCase()}.json`\r\n\t\t);\r\n\t\tconst apiData = await apiResponse.json();\r\n\t\treturn apiData;\r\n\t}\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n\tname: 'posts',\r\n\tinitialState,\r\n\treducers: {},\r\n\textraReducers: (builder) => {\r\n\t\tbuilder\r\n\t\t\t.addCase(fetchPosts.pending, (state, action) => {\r\n\t\t\t\tstate.postsLoading = true;\r\n\t\t\t\tstate.postsError = false;\r\n\t\t\t})\r\n\t\t\t.addCase(\r\n\t\t\t\tfetchPosts.fulfilled,\r\n\t\t\t\t(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\t// Destructuring the children property from action.payload.data.children\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\tdata: { children },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}\r\n\t\t\t\t) => {\r\n\t\t\t\t\tstate.postsLoading = false;\r\n\t\t\t\t\tstate.posts = children.map((postData) => postData.data);\r\n\t\t\t\t\tstate.postsError = false;\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.addCase(fetchPosts.rejected, (state, action) => {\r\n\t\t\t\tstate.postsLoading = false;\r\n\t\t\t\tstate.postsError = true;\r\n\t\t\t});\r\n\t},\r\n});\r\n\r\nexport default postsSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n\tsubredditsLoading: false,\r\n\tsubreddits: null,\r\n\tsubredditsError: false,\r\n};\r\n\r\nexport const fetchSubreddits = createAsyncThunk(\r\n\t'counter/fetchSubreddits',\r\n\tasync (searchTerm = null) => {\r\n\t\tconst topSubredditsEndpoint = 'https://www.reddit.com/subreddits.json';\r\n\t\tconst subredditsBySearchTermEndpoint = `https://www.reddit.com/search.json?q=${searchTerm}&type=sr`;\r\n\t\tconst apiResponse = await fetch(\r\n\t\t\tsearchTerm ? subredditsBySearchTermEndpoint : topSubredditsEndpoint\r\n\t\t);\r\n\t\tconst apiData = await apiResponse.json();\r\n\t\treturn apiData;\r\n\t}\r\n);\r\n\r\nexport const subredditsSlice = createSlice({\r\n\tname: 'subreddits',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tclearAll: (state) => {\r\n\t\t\tstate.subredditsLoading = false;\r\n\t\t\tstate.subreddits = null;\r\n\t\t\tstate.subredditsError = false;\r\n\t\t},\r\n\t},\r\n\textraReducers: (builder) => {\r\n\t\tbuilder\r\n\t\t\t.addCase(fetchSubreddits.pending, (state, action) => {\r\n\t\t\t\tstate.subredditsLoading = true;\r\n\t\t\t\tstate.subredditsError = false;\r\n\t\t\t})\r\n\t\t\t.addCase(\r\n\t\t\t\tfetchSubreddits.fulfilled,\r\n\t\t\t\t(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\tdata: { children },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}\r\n\t\t\t\t) => {\r\n\t\t\t\t\tstate.subredditsLoading = false;\r\n\t\t\t\t\tstate.subreddits = children.map((postData) => postData.data);\r\n\t\t\t\t\tstate.subredditsError = false;\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.addCase(fetchSubreddits.rejected, (state, action) => {\r\n\t\t\t\tstate.subredditsLoading = false;\r\n\t\t\t\tstate.subredditsError = true;\r\n\t\t\t});\r\n\t},\r\n});\r\n\r\nexport const { clearAll } = subredditsSlice.actions;\r\n\r\nexport default subredditsSlice.reducer;\r\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar';\r\nimport InfoModal from './components/InfoModal';\r\nimport SubredditsDisplay from './views/SubredditsDisplay';\r\nimport Home from './views/Home';\r\nimport CatchAll from './views/CatchAll';\r\nimport SideButtons from './components/SideButtons';\r\nimport Logo from './components/Logo';\r\nimport scrollDisabler from './scrollDisabler';\r\n\r\nfunction App() {\r\n\tconst [showInfoModal, setShowInfoModal] = useState(false);\r\n\r\n\tconst toggleInfoModal = () => {\r\n\t\tsetShowInfoModal((prevState) => !prevState);\r\n\t\tscrollDisabler();\r\n\t};\r\n\r\n\t// return (\r\n\t// \t<Router>\r\n\t// \t\t{showInfoModal && <InfoModal infoModalToggler={toggleInfoModal} />}\r\n\t// \t\t<NavBar infoModalToggler={toggleInfoModal} />\r\n\t// \t\t<SideButtons />\r\n\t// \t\t<Switch>\r\n\t// \t\t\t<Route exact path=\"/home\">\r\n\t// \t\t\t\t<Home />\r\n\t// \t\t\t</Route>\r\n\r\n\t// \t\t\t<Route exact path=\"/subreddits\">\r\n\t// \t\t\t\t<SubredditsDisplay />\r\n\t// \t\t\t</Route>\r\n\r\n\t// \t\t\t<Route exact path=\"*\">\r\n\t// \t\t\t\t<CatchAll />\r\n\t// \t\t\t</Route>\r\n\t// \t\t</Switch>\r\n\t// \t</Router>\r\n\t// );\r\n\treturn (\r\n\t\t<div classNamee=\"w-screen h-screen\">\r\n\t\t\t<Logo />\r\n\t\t\t<h1 classNamee=\"text-blue-200\">Coming Soon</h1>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport postsReducer from '../features/posts/postsSlice';\r\nimport subredditsReducer from '../features/subreddits/subredditSlice';\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\tposts: postsReducer,\r\n\t\tsubreddits: subredditsReducer,\r\n\t},\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}